What I want to talk about next is to talk about knowledge graphs, and in particular,
I wanna talk about knowledge graph completion task, uh,
using embeddings and I wanna present you
some very interesting knowledge graph completion methods.
So knowledge graph, uh,
the idea is that you wanna store knowledge about a given domain in a graph form.
And the idea is that we wanna capture entities,
types, and relationships between different entities.
So the idea is that now I will have the nodes,
which I will call entities.
Entities will be labeled with different, uh, types.
Um, and then I will have different types of relationships, uh, between entities.
Um, and in this sense,
knowledge graph is just an example of a heterogenous graph but generally,
we would think of a knowledge graph as something that
captures factual knowledge about a given domain.
So for example, you could take a bibliographic network where you could say,
I'll have different node types like papers,
titles, authors, conferences, years.
And then I will have, uh, different, uh,
relation types like where was the publication done,
what year was it done,
what title does it have,
who is the author of it,
who cites it, and so on.
And this is, for example,
one way to look at the schema of this type of,
uh, knowledge graph would be the following, right?
Paper links to conference,
papers cite each other,
papers have titles, have years- publication years, and have authors.
And of course, that's multiple authors,
multiple conferences, and all these, uh, links to each other.
Another example is something I already discussed would be in biomedicine,
there is a lot of knowledge graphs where we can have
different types- node types in terms of drugs,
diseases, adverse events, proteins,
uh, disease pathways, and so on.
And then we also can have different, uh,
types of relations like has function,
causes, is associated, treats,
uh, is a, type of relationship.
And now we have this knowledge about biology and how, uh,
how, uh, life works encoded in this, uh, graphical form.
And then, uh, of course,
there are a lot of, uh,
knowledge graphs that are actually publicly available and store knowledge about,
uh, other types of entities as well.
So for example, about real-world entities, you know,
Google is using, uh,
Google Knowledge Graph to make,
uh, search results better.
Uh, Amazon is using their product graph to
understand properties of different products and be able f- to,
uh, to search and recommend products better.
Uh, Facebook has a Graph API because they think of the social network interests,
relationships between people's schools they graduated from as nodes in a giant graph.
Uh, IBM Watson in the background uses, uh,
a giant, uh, graph to be able to answer questions and reason.
Uh, Microsoft, uh, search engine and the company is using Microsoft Satori,
which is their own proprietary knowledge graph.
Uh, you know, LinkedIn,
uh, I think, uh, calls its Knowledge Graph,
uh, the- the- the Economic Knowledge Graph and- and so on and so forth.
So knowledge graphs are basically heavily used in
industry to capture background knowledge about a given domain,
to capture relationships between the nodes in a given domain.
And for example, one way, uh,
you can use knowledge graphs is simply to serve information.
So for example, if you go to Bing search engine and say, you know,
what are the latest movies, uh,
by the director of Titanic,
this is a- a knowledge graph grid, right?
You find Titanic, you say who has directed it?
You find that person and you say,
which other movies has this,
uh- uh, person directed?
And you can directly,
uh, surface this information.
And without having this data encoded in a graphical form,
answering this type of query,
this type of question,
would be practically impossible.
Knowledge graphs are also, uh,
very important in question answering and conversational ag- agents.
And here I show kind of the- the system diagram, uh,
for, uh, one of these,
uh, one of these, uh, types of,
uh- um-uh- uh, agent- uh,
systems where basically you- you get in the questions,
you wanna have a conversation with an agent
and the agent will understand what- what are
the entities that- that are contained in the question and how
these entities relate to each other so that it can then come back with a,
let's say, an intelligent, uh, answer.
And you can think, for example,
of knowledge encoded in Wikipedia, IMDb,
and so on as examples of data sources you can use, uh, for your knowledge graph.
Right? So there are many publicly available, uh,
knowledge graph, uh- uh- uh,
knowledge graphs out there.
For example, FreeBase, um,
then there is Wikipedia or Wik data,
uh, there is DBpedia,
uh, and so on and so forth.
And one common characteristic of
these knowledge graphs is that they- they are massive, they have millions,
tens of millions of nodes and edges,
but they are also notoriously incomplete,
meaning a lot of relationships are missing.
And one of the most fundamental tasks in
knowledge graph literature is to say given a massive knowledge graph, enumerate,
uh, or, uh, identify what task- what relations are missing in the graph.
So the question is, can we predict plausible but missing links in the knowledge graph?
So gi- to give you an example, so for example,
FreeBase is a knowledge graph, uh, that,
uh, was acquired by Google and Google uses it,
uh- uh- uh as a basis for Google Knowledge Graph.
It contains knowledge about real-world entities and their relationships.
So it has 50,000 entities,
it has 38,000, uh,
relation types, and 3 billion edges, right?
So- so you know, right,
the num- the cardinality of the number of different relationships,
it's 38,000, right? So it's huge.
And now if you think of this in the context of RGCN,
we would need to learn 38,000 different
transformation matrices for every layer of the GCN,
which clearly becomes intractable, right?
But what is interesting is, for example, uh,
not- almost like 94% of all the people,
person nodes in FreeBase have no place of birth and, you know,
78,000, uh, 78% have no, uh, nationality.
All right? So these knowledge graphs are notoriously incomplete.
Um, and, uh, the question then is,
can we automatically infer what is nationality of a given node,
or could we automatically infer where was a given node,
a given person, uh, born.
And this is what is called, uh,
knowledge graph, uh, completion.
